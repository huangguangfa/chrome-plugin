/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/browserAction/js/vm.js":
/*!************************************!*\
  !*** ./src/browserAction/js/vm.js ***!
  \************************************/
/***/ (() => {

eval("const app = chrome.extension.getBackgroundPage();\r\n//type发送的类型 data发送的数据\r\nconst sendMes = (type,data) =>{\r\n    return new Promise( resolve =>{\r\n        chrome.runtime.sendMessage( { type,data }, (res)=> {  resolve(res) });\r\n    })\r\n}\r\n\r\nconst vm = new Vue({\r\n    el: '#app',\r\n    data: {\r\n        tableConfig:[],\r\n        tableData: [],\r\n        del_list:[],\r\n        is_configuration_ules:false,\r\n        //定义规则\r\n        config:{\r\n            name:null,          //拦截的名称\r\n            url:null,           //拦截的url\r\n            params:null, //接口展示字段\r\n            isAdd:true, //是否新增操作\r\n            edit_rule_name:null, //编辑的规则key\r\n            table_config:[     //设置表头配置\r\n                { prop: null,label:null,Reg:null },\r\n                { prop: null,label:null,Reg:null },\r\n                { prop: null,label:null,Reg:null } \r\n            ]\r\n        },\r\n        //规则列表\r\n        rule_list:[],\r\n        start_rule:\"\",\r\n        //抓取的结果\r\n        isJosnShow:false,\r\n        isJsonString:false,\r\n        jsonResultData:null\r\n    },\r\n    created(){\r\n        this.initPage();\r\n        app.badge.del();\r\n    },\r\n    methods:{\r\n        initPage(){\r\n            const { start_rule,rule_object,rule_list,table_data,requestResult } = app.networkConfig;\r\n            //当前规则\r\n            this.start_rule = start_rule;\r\n            //表格参数\r\n            this.tableConfig = rule_object[start_rule].table_config;\r\n            //规则列表\r\n            this.rule_list = rule_list;\r\n            //获取表格数据\r\n            this.tableData = table_data;\r\n            //获取抓取的结果\r\n            this.jsonResultData = this.jsonFormat(requestResult)\r\n        },\r\n        //删除某个规则\r\n        async delRuleRow(data){\r\n            const { value } = data;\r\n            if( value === this.start_rule ) return this.$message.error('当前规则正在启动不能删除！')\r\n            const { status, mes } = await sendMes('del_rule',value)\r\n            !status && this.$message.error(mes);\r\n            if(status) { this.$message.success(mes); this.initPage(); this.$refs.rule_list_ref.blur() }\r\n        },\r\n        // 切换规则\r\n        async switchRule( res ){\r\n            const { status, mes } = await sendMes('switch_rule',res);\r\n            !status && this.$message.error(mes);\r\n            status && this.$message.success(mes);\r\n            if(status) this.initPage()\r\n        },\r\n        //刷新页面\r\n        refreshPage(){\r\n            app.refreshPage()\r\n            this.isJosnShow = false;\r\n            this.tableData = [];\r\n        },\r\n        //编辑规则\r\n        editRule( data ){\r\n            const { value } = data;\r\n            if( value === this.start_rule ) return this.$message.error('当前规则正在启动不能编辑！')\r\n            const { url,name, table_config,params} = app.networkConfig.rule_config.rule_object[value];\r\n            this.config.isAdd = false;\r\n            this.config.params = params;\r\n            this.config.name = name;\r\n            this.config.url = url;\r\n            this.config.edit_rule_name = value;\r\n            this.config.table_config = table_config;\r\n            this.is_configuration_ules = true;\r\n            this.$refs.rule_list_ref.blur()\r\n        },\r\n        handleeExport(){\r\n            if(!this.del_list.length ) return this.$message.error('请勾选需要导出的数据');\r\n            this.exports('导出列表',this.del_list);\r\n        },\r\n        uploadRow(index,data){  \r\n            this.exports(`导出第${index+1}条数据`,[data])\r\n        },\r\n        exports(fileName,excel_data){\r\n            //excel表头\r\n            const excelHade = this.tableConfig.map( item => item.label )\r\n            //遍历\r\n            const exceLable = this.tableConfig.map( item => item.prop );\r\n            const excelContent = excel_data.map( item => {\r\n                const row_data = [];\r\n                exceLable.forEach( Lable => row_data.push(item[Lable]) )\r\n                return row_data\r\n            })\r\n            let option={\r\n                fileName,\r\n                datas:[ { sheetData:excelContent,  sheetHeader:excelHade } ]\r\n            };\r\n            let toExcel = new ExportJsonExcel(option);\r\n            toExcel.saveExcel();\r\n            // this.$message.success('导出成功');\r\n            app.notifications({title:'导出会员列表',message:'导出成功！！！'})\r\n            this.$refs.ref_table.clearSelection()\r\n        },\r\n        //批量删除\r\n        delMore(){\r\n            if(!this.del_list.length ) return this.$message.error('批量删除操作至少勾选一个');\r\n            this.$confirm('确定执行批量删除操作吗?', '提示', {\r\n                confirmButtonText: '确定',\r\n                cancelButtonText: '取消',\r\n                type: 'success'\r\n            }).then(() => {\r\n                this.del_list.forEach( item => this.delleItem(item._index) )\r\n                this.del_list = [];\r\n                this.$message.success('操作成功');\r\n            }).catch( () =>{});\r\n        },  \r\n        //单个删除\r\n        delleItem(cur_index,status){\r\n            this.tableData = this.tableData.filter( ( item,index ) =>  index !== cur_index );\r\n            status &&  this.$message.success('操作成功');\r\n        },\r\n        tableRowClassName({row, rowIndex}) {\r\n            if(!rowIndex) return;\r\n            row._index = rowIndex;\r\n            if( rowIndex % 2 === 1 ) return 'cu-row';\r\n        },\r\n        //规则配置\r\n        async submit(){\r\n            const { name,url,isAdd } = this.config;\r\n            this.config.table_config = this.config.table_config.filter( item => item.prop && item.label )\r\n            if( !name || !url || !this.config.table_config.length){ return this.$message.error('页面参数不能为空与必须有一个接口配置参数！') }\r\n            let code = isAdd ? 'update_rule_list' : 'edit_rule'\r\n            const { status, mes } = await sendMes(code,this.config);\r\n            if(!status) return this.$message.error(mes);\r\n            status && this.$message.success(mes)\r\n            this.initPage()\r\n            this.is_configuration_ules = false;\r\n        },\r\n        //清除新增规则参数配置\r\n        clearRuleParams(){\r\n            this.config = {\r\n                name:null,         \r\n                url:null,     \r\n                params:null,      \r\n                table_config:[    \r\n                    { prop: null,label:null },\r\n                    { prop: null,label:null },\r\n                    { prop: null,label:null } \r\n                ]\r\n            }\r\n        },\r\n        addRow(){\r\n            this.config.table_config.push({ prop: null,label:null,Reg:null })\r\n            this.$nextTick(() => {\r\n                const div =  this.$refs.table_config;\r\n                div.scrollTop = div.scrollHeight - 300;\r\n            })\r\n        },\r\n        switchDataShow(){\r\n            this.isJosnShow = !this.isJosnShow;\r\n        },\r\n        //json转换\r\n        jsonFormat(jsonTemp) {\r\n            let json = ''\r\n            try {\r\n                // stringify 时需指定缩进否则不会显示换行。为了防止传入的string没有指定 在此统一执行一遍\r\n                if (typeof jsonTemp != 'string') {\r\n                    json = JSON.stringify(jsonTemp, undefined, 2);\r\n                } else {\r\n                    json = JSON.stringify(JSON.parse(jsonTemp), undefined, 2)\r\n                }\r\n                let jsonObj = JSON.parse(json);\r\n                if (typeof jsonObj === 'object') {\r\n                    this.isJsonString = false\r\n                    json = json.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');\r\n                        return json.replace(/(\"(\\\\u[a-zA-Z0-9]{4}|\\\\[^u]|[^\\\\\"])*\"(\\s*:)?|\\b(true|false|null)\\b|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?)/g, match => {\r\n                            let cls = 'number';\r\n                            if (/^\"/.test(match)) {\r\n                                if (/:$/.test(match)) {\r\n                                cls = 'key';\r\n                                } else {\r\n                                cls = 'string';\r\n                                }\r\n                            } else if (/true|false/.test(match)) {\r\n                                cls = 'boolean';\r\n                            } else if (/null/.test(match)) {\r\n                                cls = 'null';\r\n                            }\r\n                            return '<span class=\"' + cls + '\">' + match + '</span>';\r\n                        });\r\n                } else {\r\n                    this.isJsonString = true\r\n                    return jsonTemp\r\n                }\r\n            } catch (e) {\r\n              this.isJsonString = true\r\n              return jsonTemp\r\n            }\r\n        }\r\n    }\r\n})\r\napp.vm = vm;\n\n//# sourceURL=webpack://chrome-plugin/./src/browserAction/js/vm.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/browserAction/js/vm.js"]();
/******/ 	
/******/ })()
;